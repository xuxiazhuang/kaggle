{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200000, 202)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "df = pd.read_csv('train.csv')\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_code</th>\n",
       "      <th>target</th>\n",
       "      <th>var_0</th>\n",
       "      <th>var_1</th>\n",
       "      <th>var_2</th>\n",
       "      <th>var_3</th>\n",
       "      <th>var_4</th>\n",
       "      <th>var_5</th>\n",
       "      <th>var_6</th>\n",
       "      <th>var_7</th>\n",
       "      <th>...</th>\n",
       "      <th>var_190</th>\n",
       "      <th>var_191</th>\n",
       "      <th>var_192</th>\n",
       "      <th>var_193</th>\n",
       "      <th>var_194</th>\n",
       "      <th>var_195</th>\n",
       "      <th>var_196</th>\n",
       "      <th>var_197</th>\n",
       "      <th>var_198</th>\n",
       "      <th>var_199</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>train_0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.9255</td>\n",
       "      <td>-6.7863</td>\n",
       "      <td>11.9081</td>\n",
       "      <td>5.0930</td>\n",
       "      <td>11.4607</td>\n",
       "      <td>-9.2834</td>\n",
       "      <td>5.1187</td>\n",
       "      <td>18.6266</td>\n",
       "      <td>...</td>\n",
       "      <td>4.4354</td>\n",
       "      <td>3.9642</td>\n",
       "      <td>3.1364</td>\n",
       "      <td>1.6910</td>\n",
       "      <td>18.5227</td>\n",
       "      <td>-2.3978</td>\n",
       "      <td>7.8784</td>\n",
       "      <td>8.5635</td>\n",
       "      <td>12.7803</td>\n",
       "      <td>-1.0914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>train_1</td>\n",
       "      <td>0</td>\n",
       "      <td>11.5006</td>\n",
       "      <td>-4.1473</td>\n",
       "      <td>13.8588</td>\n",
       "      <td>5.3890</td>\n",
       "      <td>12.3622</td>\n",
       "      <td>7.0433</td>\n",
       "      <td>5.6208</td>\n",
       "      <td>16.5338</td>\n",
       "      <td>...</td>\n",
       "      <td>7.6421</td>\n",
       "      <td>7.7214</td>\n",
       "      <td>2.5837</td>\n",
       "      <td>10.9516</td>\n",
       "      <td>15.4305</td>\n",
       "      <td>2.0339</td>\n",
       "      <td>8.1267</td>\n",
       "      <td>8.7889</td>\n",
       "      <td>18.3560</td>\n",
       "      <td>1.9518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>train_2</td>\n",
       "      <td>0</td>\n",
       "      <td>8.6093</td>\n",
       "      <td>-2.7457</td>\n",
       "      <td>12.0805</td>\n",
       "      <td>7.8928</td>\n",
       "      <td>10.5825</td>\n",
       "      <td>-9.0837</td>\n",
       "      <td>6.9427</td>\n",
       "      <td>14.6155</td>\n",
       "      <td>...</td>\n",
       "      <td>2.9057</td>\n",
       "      <td>9.7905</td>\n",
       "      <td>1.6704</td>\n",
       "      <td>1.6858</td>\n",
       "      <td>21.6042</td>\n",
       "      <td>3.1417</td>\n",
       "      <td>-6.5213</td>\n",
       "      <td>8.2675</td>\n",
       "      <td>14.7222</td>\n",
       "      <td>0.3965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>train_3</td>\n",
       "      <td>0</td>\n",
       "      <td>11.0604</td>\n",
       "      <td>-2.1518</td>\n",
       "      <td>8.9522</td>\n",
       "      <td>7.1957</td>\n",
       "      <td>12.5846</td>\n",
       "      <td>-1.8361</td>\n",
       "      <td>5.8428</td>\n",
       "      <td>14.9250</td>\n",
       "      <td>...</td>\n",
       "      <td>4.4666</td>\n",
       "      <td>4.7433</td>\n",
       "      <td>0.7178</td>\n",
       "      <td>1.4214</td>\n",
       "      <td>23.0347</td>\n",
       "      <td>-1.2706</td>\n",
       "      <td>-2.9275</td>\n",
       "      <td>10.2922</td>\n",
       "      <td>17.9697</td>\n",
       "      <td>-8.9996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>train_4</td>\n",
       "      <td>0</td>\n",
       "      <td>9.8369</td>\n",
       "      <td>-1.4834</td>\n",
       "      <td>12.8746</td>\n",
       "      <td>6.6375</td>\n",
       "      <td>12.2772</td>\n",
       "      <td>2.4486</td>\n",
       "      <td>5.9405</td>\n",
       "      <td>19.2514</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.4905</td>\n",
       "      <td>9.5214</td>\n",
       "      <td>-0.1508</td>\n",
       "      <td>9.1942</td>\n",
       "      <td>13.2876</td>\n",
       "      <td>-1.5121</td>\n",
       "      <td>3.9267</td>\n",
       "      <td>9.5031</td>\n",
       "      <td>17.9974</td>\n",
       "      <td>-8.8104</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 202 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID_code  target    var_0   var_1    var_2   var_3    var_4   var_5   var_6  \\\n",
       "0  train_0       0   8.9255 -6.7863  11.9081  5.0930  11.4607 -9.2834  5.1187   \n",
       "1  train_1       0  11.5006 -4.1473  13.8588  5.3890  12.3622  7.0433  5.6208   \n",
       "2  train_2       0   8.6093 -2.7457  12.0805  7.8928  10.5825 -9.0837  6.9427   \n",
       "3  train_3       0  11.0604 -2.1518   8.9522  7.1957  12.5846 -1.8361  5.8428   \n",
       "4  train_4       0   9.8369 -1.4834  12.8746  6.6375  12.2772  2.4486  5.9405   \n",
       "\n",
       "     var_7  ...  var_190  var_191  var_192  var_193  var_194  var_195  \\\n",
       "0  18.6266  ...   4.4354   3.9642   3.1364   1.6910  18.5227  -2.3978   \n",
       "1  16.5338  ...   7.6421   7.7214   2.5837  10.9516  15.4305   2.0339   \n",
       "2  14.6155  ...   2.9057   9.7905   1.6704   1.6858  21.6042   3.1417   \n",
       "3  14.9250  ...   4.4666   4.7433   0.7178   1.4214  23.0347  -1.2706   \n",
       "4  19.2514  ...  -1.4905   9.5214  -0.1508   9.1942  13.2876  -1.5121   \n",
       "\n",
       "   var_196  var_197  var_198  var_199  \n",
       "0   7.8784   8.5635  12.7803  -1.0914  \n",
       "1   8.1267   8.7889  18.3560   1.9518  \n",
       "2  -6.5213   8.2675  14.7222   0.3965  \n",
       "3  -2.9275  10.2922  17.9697  -8.9996  \n",
       "4   3.9267   9.5031  17.9974  -8.8104  \n",
       "\n",
       "[5 rows x 202 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_code</th>\n",
       "      <th>var_0</th>\n",
       "      <th>var_1</th>\n",
       "      <th>var_2</th>\n",
       "      <th>var_3</th>\n",
       "      <th>var_4</th>\n",
       "      <th>var_5</th>\n",
       "      <th>var_6</th>\n",
       "      <th>var_7</th>\n",
       "      <th>var_8</th>\n",
       "      <th>...</th>\n",
       "      <th>var_190</th>\n",
       "      <th>var_191</th>\n",
       "      <th>var_192</th>\n",
       "      <th>var_193</th>\n",
       "      <th>var_194</th>\n",
       "      <th>var_195</th>\n",
       "      <th>var_196</th>\n",
       "      <th>var_197</th>\n",
       "      <th>var_198</th>\n",
       "      <th>var_199</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>...</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "      <td>179902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>...</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "      <td>20098</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 201 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ID_code   var_0   var_1   var_2   var_3   var_4   var_5   var_6  \\\n",
       "target                                                                    \n",
       "0        179902  179902  179902  179902  179902  179902  179902  179902   \n",
       "1         20098   20098   20098   20098   20098   20098   20098   20098   \n",
       "\n",
       "         var_7   var_8  ...  var_190  var_191  var_192  var_193  var_194  \\\n",
       "target                  ...                                                \n",
       "0       179902  179902  ...   179902   179902   179902   179902   179902   \n",
       "1        20098   20098  ...    20098    20098    20098    20098    20098   \n",
       "\n",
       "        var_195  var_196  var_197  var_198  var_199  \n",
       "target                                               \n",
       "0        179902   179902   179902   179902   179902  \n",
       "1         20098    20098    20098    20098    20098  \n",
       "\n",
       "[2 rows x 201 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('target').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>target</th>\n",
       "      <th>var_0</th>\n",
       "      <th>var_1</th>\n",
       "      <th>var_2</th>\n",
       "      <th>var_3</th>\n",
       "      <th>var_4</th>\n",
       "      <th>var_5</th>\n",
       "      <th>var_6</th>\n",
       "      <th>var_7</th>\n",
       "      <th>var_8</th>\n",
       "      <th>...</th>\n",
       "      <th>var_190</th>\n",
       "      <th>var_191</th>\n",
       "      <th>var_192</th>\n",
       "      <th>var_193</th>\n",
       "      <th>var_194</th>\n",
       "      <th>var_195</th>\n",
       "      <th>var_196</th>\n",
       "      <th>var_197</th>\n",
       "      <th>var_198</th>\n",
       "      <th>var_199</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "      <td>200000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.100490</td>\n",
       "      <td>10.679914</td>\n",
       "      <td>-1.627622</td>\n",
       "      <td>10.715192</td>\n",
       "      <td>6.796529</td>\n",
       "      <td>11.078333</td>\n",
       "      <td>-5.065317</td>\n",
       "      <td>5.408949</td>\n",
       "      <td>16.545850</td>\n",
       "      <td>0.284162</td>\n",
       "      <td>...</td>\n",
       "      <td>3.234440</td>\n",
       "      <td>7.438408</td>\n",
       "      <td>1.927839</td>\n",
       "      <td>3.331774</td>\n",
       "      <td>17.993784</td>\n",
       "      <td>-0.142088</td>\n",
       "      <td>2.303335</td>\n",
       "      <td>8.908158</td>\n",
       "      <td>15.870720</td>\n",
       "      <td>-3.326537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.300653</td>\n",
       "      <td>3.040051</td>\n",
       "      <td>4.050044</td>\n",
       "      <td>2.640894</td>\n",
       "      <td>2.043319</td>\n",
       "      <td>1.623150</td>\n",
       "      <td>7.863267</td>\n",
       "      <td>0.866607</td>\n",
       "      <td>3.418076</td>\n",
       "      <td>3.332634</td>\n",
       "      <td>...</td>\n",
       "      <td>4.559922</td>\n",
       "      <td>3.023272</td>\n",
       "      <td>1.478423</td>\n",
       "      <td>3.992030</td>\n",
       "      <td>3.135162</td>\n",
       "      <td>1.429372</td>\n",
       "      <td>5.454369</td>\n",
       "      <td>0.921625</td>\n",
       "      <td>3.010945</td>\n",
       "      <td>10.438015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.408400</td>\n",
       "      <td>-15.043400</td>\n",
       "      <td>2.117100</td>\n",
       "      <td>-0.040200</td>\n",
       "      <td>5.074800</td>\n",
       "      <td>-32.562600</td>\n",
       "      <td>2.347300</td>\n",
       "      <td>5.349700</td>\n",
       "      <td>-10.505500</td>\n",
       "      <td>...</td>\n",
       "      <td>-14.093300</td>\n",
       "      <td>-2.691700</td>\n",
       "      <td>-3.814500</td>\n",
       "      <td>-11.783400</td>\n",
       "      <td>8.694400</td>\n",
       "      <td>-5.261000</td>\n",
       "      <td>-14.209600</td>\n",
       "      <td>5.960600</td>\n",
       "      <td>6.299300</td>\n",
       "      <td>-38.852800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.453850</td>\n",
       "      <td>-4.740025</td>\n",
       "      <td>8.722475</td>\n",
       "      <td>5.254075</td>\n",
       "      <td>9.883175</td>\n",
       "      <td>-11.200350</td>\n",
       "      <td>4.767700</td>\n",
       "      <td>13.943800</td>\n",
       "      <td>-2.317800</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.058825</td>\n",
       "      <td>5.157400</td>\n",
       "      <td>0.889775</td>\n",
       "      <td>0.584600</td>\n",
       "      <td>15.629800</td>\n",
       "      <td>-1.170700</td>\n",
       "      <td>-1.946925</td>\n",
       "      <td>8.252800</td>\n",
       "      <td>13.829700</td>\n",
       "      <td>-11.208475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.524750</td>\n",
       "      <td>-1.608050</td>\n",
       "      <td>10.580000</td>\n",
       "      <td>6.825000</td>\n",
       "      <td>11.108250</td>\n",
       "      <td>-4.833150</td>\n",
       "      <td>5.385100</td>\n",
       "      <td>16.456800</td>\n",
       "      <td>0.393700</td>\n",
       "      <td>...</td>\n",
       "      <td>3.203600</td>\n",
       "      <td>7.347750</td>\n",
       "      <td>1.901300</td>\n",
       "      <td>3.396350</td>\n",
       "      <td>17.957950</td>\n",
       "      <td>-0.172700</td>\n",
       "      <td>2.408900</td>\n",
       "      <td>8.888200</td>\n",
       "      <td>15.934050</td>\n",
       "      <td>-2.819550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.758200</td>\n",
       "      <td>1.358625</td>\n",
       "      <td>12.516700</td>\n",
       "      <td>8.324100</td>\n",
       "      <td>12.261125</td>\n",
       "      <td>0.924800</td>\n",
       "      <td>6.003000</td>\n",
       "      <td>19.102900</td>\n",
       "      <td>2.937900</td>\n",
       "      <td>...</td>\n",
       "      <td>6.406200</td>\n",
       "      <td>9.512525</td>\n",
       "      <td>2.949500</td>\n",
       "      <td>6.205800</td>\n",
       "      <td>20.396525</td>\n",
       "      <td>0.829600</td>\n",
       "      <td>6.556725</td>\n",
       "      <td>9.593300</td>\n",
       "      <td>18.064725</td>\n",
       "      <td>4.836800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.315000</td>\n",
       "      <td>10.376800</td>\n",
       "      <td>19.353000</td>\n",
       "      <td>13.188300</td>\n",
       "      <td>16.671400</td>\n",
       "      <td>17.251600</td>\n",
       "      <td>8.447700</td>\n",
       "      <td>27.691800</td>\n",
       "      <td>10.151300</td>\n",
       "      <td>...</td>\n",
       "      <td>18.440900</td>\n",
       "      <td>16.716500</td>\n",
       "      <td>8.402400</td>\n",
       "      <td>18.281800</td>\n",
       "      <td>27.928800</td>\n",
       "      <td>4.272900</td>\n",
       "      <td>18.321500</td>\n",
       "      <td>12.000400</td>\n",
       "      <td>26.079100</td>\n",
       "      <td>28.500700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 201 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              target          var_0          var_1          var_2  \\\n",
       "count  200000.000000  200000.000000  200000.000000  200000.000000   \n",
       "mean        0.100490      10.679914      -1.627622      10.715192   \n",
       "std         0.300653       3.040051       4.050044       2.640894   \n",
       "min         0.000000       0.408400     -15.043400       2.117100   \n",
       "25%         0.000000       8.453850      -4.740025       8.722475   \n",
       "50%         0.000000      10.524750      -1.608050      10.580000   \n",
       "75%         0.000000      12.758200       1.358625      12.516700   \n",
       "max         1.000000      20.315000      10.376800      19.353000   \n",
       "\n",
       "               var_3          var_4          var_5          var_6  \\\n",
       "count  200000.000000  200000.000000  200000.000000  200000.000000   \n",
       "mean        6.796529      11.078333      -5.065317       5.408949   \n",
       "std         2.043319       1.623150       7.863267       0.866607   \n",
       "min        -0.040200       5.074800     -32.562600       2.347300   \n",
       "25%         5.254075       9.883175     -11.200350       4.767700   \n",
       "50%         6.825000      11.108250      -4.833150       5.385100   \n",
       "75%         8.324100      12.261125       0.924800       6.003000   \n",
       "max        13.188300      16.671400      17.251600       8.447700   \n",
       "\n",
       "               var_7          var_8  ...        var_190        var_191  \\\n",
       "count  200000.000000  200000.000000  ...  200000.000000  200000.000000   \n",
       "mean       16.545850       0.284162  ...       3.234440       7.438408   \n",
       "std         3.418076       3.332634  ...       4.559922       3.023272   \n",
       "min         5.349700     -10.505500  ...     -14.093300      -2.691700   \n",
       "25%        13.943800      -2.317800  ...      -0.058825       5.157400   \n",
       "50%        16.456800       0.393700  ...       3.203600       7.347750   \n",
       "75%        19.102900       2.937900  ...       6.406200       9.512525   \n",
       "max        27.691800      10.151300  ...      18.440900      16.716500   \n",
       "\n",
       "             var_192        var_193        var_194        var_195  \\\n",
       "count  200000.000000  200000.000000  200000.000000  200000.000000   \n",
       "mean        1.927839       3.331774      17.993784      -0.142088   \n",
       "std         1.478423       3.992030       3.135162       1.429372   \n",
       "min        -3.814500     -11.783400       8.694400      -5.261000   \n",
       "25%         0.889775       0.584600      15.629800      -1.170700   \n",
       "50%         1.901300       3.396350      17.957950      -0.172700   \n",
       "75%         2.949500       6.205800      20.396525       0.829600   \n",
       "max         8.402400      18.281800      27.928800       4.272900   \n",
       "\n",
       "             var_196        var_197        var_198        var_199  \n",
       "count  200000.000000  200000.000000  200000.000000  200000.000000  \n",
       "mean        2.303335       8.908158      15.870720      -3.326537  \n",
       "std         5.454369       0.921625       3.010945      10.438015  \n",
       "min       -14.209600       5.960600       6.299300     -38.852800  \n",
       "25%        -1.946925       8.252800      13.829700     -11.208475  \n",
       "50%         2.408900       8.888200      15.934050      -2.819550  \n",
       "75%         6.556725       9.593300      18.064725       4.836800  \n",
       "max        18.321500      12.000400      26.079100      28.500700  \n",
       "\n",
       "[8 rows x 201 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200000, 200)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = df.target\n",
    "df.head(3)\n",
    "drop_list = df[['target','ID_code']]\n",
    "x = df.drop(drop_list,axis = 1)\n",
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var_0</th>\n",
       "      <th>var_1</th>\n",
       "      <th>var_2</th>\n",
       "      <th>var_3</th>\n",
       "      <th>var_4</th>\n",
       "      <th>var_5</th>\n",
       "      <th>var_6</th>\n",
       "      <th>var_7</th>\n",
       "      <th>var_8</th>\n",
       "      <th>var_9</th>\n",
       "      <th>...</th>\n",
       "      <th>var_190</th>\n",
       "      <th>var_191</th>\n",
       "      <th>var_192</th>\n",
       "      <th>var_193</th>\n",
       "      <th>var_194</th>\n",
       "      <th>var_195</th>\n",
       "      <th>var_196</th>\n",
       "      <th>var_197</th>\n",
       "      <th>var_198</th>\n",
       "      <th>var_199</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.9255</td>\n",
       "      <td>-6.7863</td>\n",
       "      <td>11.9081</td>\n",
       "      <td>5.0930</td>\n",
       "      <td>11.4607</td>\n",
       "      <td>-9.2834</td>\n",
       "      <td>5.1187</td>\n",
       "      <td>18.6266</td>\n",
       "      <td>-4.9200</td>\n",
       "      <td>5.7470</td>\n",
       "      <td>...</td>\n",
       "      <td>4.4354</td>\n",
       "      <td>3.9642</td>\n",
       "      <td>3.1364</td>\n",
       "      <td>1.6910</td>\n",
       "      <td>18.5227</td>\n",
       "      <td>-2.3978</td>\n",
       "      <td>7.8784</td>\n",
       "      <td>8.5635</td>\n",
       "      <td>12.7803</td>\n",
       "      <td>-1.0914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11.5006</td>\n",
       "      <td>-4.1473</td>\n",
       "      <td>13.8588</td>\n",
       "      <td>5.3890</td>\n",
       "      <td>12.3622</td>\n",
       "      <td>7.0433</td>\n",
       "      <td>5.6208</td>\n",
       "      <td>16.5338</td>\n",
       "      <td>3.1468</td>\n",
       "      <td>8.0851</td>\n",
       "      <td>...</td>\n",
       "      <td>7.6421</td>\n",
       "      <td>7.7214</td>\n",
       "      <td>2.5837</td>\n",
       "      <td>10.9516</td>\n",
       "      <td>15.4305</td>\n",
       "      <td>2.0339</td>\n",
       "      <td>8.1267</td>\n",
       "      <td>8.7889</td>\n",
       "      <td>18.3560</td>\n",
       "      <td>1.9518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.6093</td>\n",
       "      <td>-2.7457</td>\n",
       "      <td>12.0805</td>\n",
       "      <td>7.8928</td>\n",
       "      <td>10.5825</td>\n",
       "      <td>-9.0837</td>\n",
       "      <td>6.9427</td>\n",
       "      <td>14.6155</td>\n",
       "      <td>-4.9193</td>\n",
       "      <td>5.9525</td>\n",
       "      <td>...</td>\n",
       "      <td>2.9057</td>\n",
       "      <td>9.7905</td>\n",
       "      <td>1.6704</td>\n",
       "      <td>1.6858</td>\n",
       "      <td>21.6042</td>\n",
       "      <td>3.1417</td>\n",
       "      <td>-6.5213</td>\n",
       "      <td>8.2675</td>\n",
       "      <td>14.7222</td>\n",
       "      <td>0.3965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.0604</td>\n",
       "      <td>-2.1518</td>\n",
       "      <td>8.9522</td>\n",
       "      <td>7.1957</td>\n",
       "      <td>12.5846</td>\n",
       "      <td>-1.8361</td>\n",
       "      <td>5.8428</td>\n",
       "      <td>14.9250</td>\n",
       "      <td>-5.8609</td>\n",
       "      <td>8.2450</td>\n",
       "      <td>...</td>\n",
       "      <td>4.4666</td>\n",
       "      <td>4.7433</td>\n",
       "      <td>0.7178</td>\n",
       "      <td>1.4214</td>\n",
       "      <td>23.0347</td>\n",
       "      <td>-1.2706</td>\n",
       "      <td>-2.9275</td>\n",
       "      <td>10.2922</td>\n",
       "      <td>17.9697</td>\n",
       "      <td>-8.9996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9.8369</td>\n",
       "      <td>-1.4834</td>\n",
       "      <td>12.8746</td>\n",
       "      <td>6.6375</td>\n",
       "      <td>12.2772</td>\n",
       "      <td>2.4486</td>\n",
       "      <td>5.9405</td>\n",
       "      <td>19.2514</td>\n",
       "      <td>6.2654</td>\n",
       "      <td>7.6784</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.4905</td>\n",
       "      <td>9.5214</td>\n",
       "      <td>-0.1508</td>\n",
       "      <td>9.1942</td>\n",
       "      <td>13.2876</td>\n",
       "      <td>-1.5121</td>\n",
       "      <td>3.9267</td>\n",
       "      <td>9.5031</td>\n",
       "      <td>17.9974</td>\n",
       "      <td>-8.8104</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 200 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     var_0   var_1    var_2   var_3    var_4   var_5   var_6    var_7   var_8  \\\n",
       "0   8.9255 -6.7863  11.9081  5.0930  11.4607 -9.2834  5.1187  18.6266 -4.9200   \n",
       "1  11.5006 -4.1473  13.8588  5.3890  12.3622  7.0433  5.6208  16.5338  3.1468   \n",
       "2   8.6093 -2.7457  12.0805  7.8928  10.5825 -9.0837  6.9427  14.6155 -4.9193   \n",
       "3  11.0604 -2.1518   8.9522  7.1957  12.5846 -1.8361  5.8428  14.9250 -5.8609   \n",
       "4   9.8369 -1.4834  12.8746  6.6375  12.2772  2.4486  5.9405  19.2514  6.2654   \n",
       "\n",
       "    var_9  ...  var_190  var_191  var_192  var_193  var_194  var_195  var_196  \\\n",
       "0  5.7470  ...   4.4354   3.9642   3.1364   1.6910  18.5227  -2.3978   7.8784   \n",
       "1  8.0851  ...   7.6421   7.7214   2.5837  10.9516  15.4305   2.0339   8.1267   \n",
       "2  5.9525  ...   2.9057   9.7905   1.6704   1.6858  21.6042   3.1417  -6.5213   \n",
       "3  8.2450  ...   4.4666   4.7433   0.7178   1.4214  23.0347  -1.2706  -2.9275   \n",
       "4  7.6784  ...  -1.4905   9.5214  -0.1508   9.1942  13.2876  -1.5121   3.9267   \n",
       "\n",
       "   var_197  var_198  var_199  \n",
       "0   8.5635  12.7803  -1.0914  \n",
       "1   8.7889  18.3560   1.9518  \n",
       "2   8.2675  14.7222   0.3965  \n",
       "3  10.2922  17.9697  -8.9996  \n",
       "4   9.5031  17.9974  -8.8104  \n",
       "\n",
       "[5 rows x 200 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "Name: target, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### how to get corr with many variebles ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a394d1630>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x1152 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#correlation map\n",
    "f,ax = plt.subplots(figsize=(16, 16))\n",
    "sns.heatmap(x.iloc[:,0:20].corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# x.iloc[:,0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(160000, 200)\n",
      "(40000, 200)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "x_train,x_val,y_train,y_val = train_test_split(x,y,test_size=0.2)\n",
    "print(x_train.shape)\n",
    "print(x_val.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###scaling \n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler().fit(x_train)\n",
    "x_train_scaled=scaler.transform(x_train)\n",
    "mod=LogisticRegression()\n",
    "mod.fit(x_train_scaled,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 10 artists>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### we can do subplot\n",
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize = [15,7])\n",
    "plt.bar(list(x.columns[0:10]),mod.coef_[0][0:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9147125"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_score = mod.score(x_train_scaled,y_train)\n",
    "train_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.91405"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### validation data\n",
    "x_val_scaled = scaler.transform(x_val)\n",
    "validation_score = mod.score(x_val_scaled,y_val)\n",
    "validation_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[35502   508]\n",
      " [ 2930  1060]]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQoAAAEKCAYAAADqyxvJAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAFQlJREFUeJzt3Xd4VGXexvHvjwSUgNQQUqRXFV0RYS3YBSvYX0QQWWVtKPq6KGDvlXVdfWUVV10QRERUuoKIIrCUiEqRKiAhBEJVUJSU5/1jDjGwIc/AMiXm/lzXXHPazPk9DLnnOW2OOecQESlNhVgXICLxT0EhIl4KChHxUlCIiJeCQkS8FBQi4qWgEBEvBYWIeCkoRMQrMdYF7E/e5lU6ZbQMqZx+WqxLkIOQvzvbwllOPQoR8VJQiIiXgkJEvBQUIuKloBARLwWFiHgpKETES0EhIl4KChHxUlCIiJeCQkS8FBQi4qWgEBEvBYWIeCkoRMRLQSEiXgoKEfFSUIiIl4JCRLwUFCLipaAQES8FhYh4KShExEtBISJeCgoR8VJQiIiXgkJEvBQUIuKloBARLwWFiHgpKETES0EhIl4KChHxUlCIiJeCQkS8FBQi4qWgEBEvBYWIeCkoRMRLQSEiXgoKEfFSUIiIl4JCRLwUFCLipaAQES8FhYh4KShExEtBISJeCgoR8UqMdQFl0a+/7ua63nezOy+PgvwCOpzVntt6Xct9j/+VzK8XUrVKFQCeuO8uWjZvwtz5C+jT/xEy0lIBOPeMU7jl+m4AzJidydMvvEJBYSFXdDqfXtf+DwD9Hn6GxUtXkJiYSKujm/PQPX2omKiPK1JWLp/Njp07KSgoJD8/n5NOvpCaNWswYvg/aNCgHt9/n8XV19zM9u0/UK3aEQwd8hL16mWQmJjA88+/wpCh78a6CRFlzrlY11CivM2r4rMwwDnHrl2/kJRUmbz8fHrc0pf+d9zEux9O5IxT29HxrNP2Wn7u/AX8a8RoBj33yF7TCwoKuOjqXrz2wpOkpiTTpdcdPPdwP5o0asD0WXM57eS2ANzz8DO0Ob4VV192cdTaeKAqp5/mXyiOrVw+mz+efAFbtmwrmvb0U/exdet2nn3uZe65uzc1a1ZnwL1P0r/f7VSvfgQD7n2S5ORafLtoOhn1WpOXlxfDFhyc/N3ZFs5yEdv0MLOWZtbPzF40s78Hw0dFan3RZGYkJVUGID8/n/z8fMzC+vfey8Ily6l/ZDr1MtKoWLEiF5xzBp9+MRuA009ph5lhZhx7VAs25m4+pG0Qv06dzmPoW6MAGPrWKDp3Ph8IfVFUrVoVgKpVq7B163by8/NjVmc0RCQozKwf8A5gwFxgXjA8wsz6R2Kd0VZQUMAV1/Xm9Iu7cnLb1hx3TEsAXnx1CJf1uIVn/v4qu3fvLlr+m0VLuPy6W7n5Lw+wctX3AORu2kxqSp2iZeqmJJO7acte68nLz2fcx1Np/8cTo9Cq8ss5x6SJI5gzexK9bghtFtZNSWbDhlwANmzIJaVObQBeHvQmR7VsRtb38/l6/lTu+stDxGvP/FCJ1EbvDcAxzrm9+mJm9jywGHg6QuuNmoSEBEYPeZkfd+zkjgGPsWLVGu68+U8k165JXl4eDz/zIq8PG8Ut13fj6BZNmDJ6CElJlZk+ay59BjzKxJGvU9L/rX07Jo8PfJk2f2hFm+NbRadh5dTpZ15KTs5G6tSpzUeT3mHZspX7XbZjxzP55pvFnNvxKpo0achHE0fwxYw57NixM4oVR1ekNj0KgfQSpqcF80pkZjeaWaaZZf5z6IgIlXZoVTuiKm1POI4ZszOpk1wLM6NSpUpcelFHFi5ZDkDVKlWKNlVOP6Ud+fn5bNv+Q+gbK3dT0XttzN1MneTaReOD3hjOtu0/cE+fG6PbqHIoJ2cjAJs2bWHMmEm0bXs8G3M3k5qaAkBqakpRb69njy588OFEAL77bg1r1mTRskXT2BQeJZEKijuBqWY2ycwGB4+PgKnAHft7kXNusHPuROfcib16dI1Qaf+9rdu282Pw7fHLr78ye95XNGpQj02btwKhbuyn02fRrHEDADZv2VrUNV347TIKnaNG9Wq0atmctevWs279BvLy8pg09XPOan8SAO+N/YiZc77k2Uf6UaGCjmJHUlJSZapWrVI03OHcM1i8eBnjx02mx7VXAdDj2qsYN+5jANZmZXP22e0BSElJpnnzxqxa/X1sio+SiB31MLMKQDsgg9D+iXXAPOdcQTivj+ejHstWrua+xwdSUFiIK3Scd/Zp3HJ9N66/vT/btv+Ac44WzRrz0N23k5RUmbffG8vIDyaQkJjA4ZUqcXefG2l97NEATJ81l2deHExBQQGXXdyRm64LBeQfTr+ItLopVElKAvY+pBqPyvJRj0aN6vPeqNcBSExM4J13PuSpp1+kVq2avPP2K9Srl0FWVjZdut7Etm3bSUuryxv//BupaSmYGc8+9zJvv/1+jFtxcMI96qHDo3JIlOWgKM9ifnhURH4/FBQi4qWgEBEvBYWIeCkoRMRLQSEiXgoKEfFSUIiIl4JCRLwUFCLipaAQES8FhYh4KShExEtBISJeCgoR8VJQiIiXgkJEvBQUIuKloBARLwWFiHgpKETES0EhIl4KChHxUlCIiJeCQkS8FBQi4qWgEBEvBYWIeCXub4aZ7QD23Ch4z41MXTDsnHPVIlybiMSJ/QaFc+6IaBYiIvErrE0PM2tvZn8KhpPNrFFkyxKReOINCjN7COgHDAgmVQKGRbIoEYkv4fQoLgM6Az8BOOfWA9osESlHwgmK3c45R7Bj08yqRLYkEYk34QTFu2b2KlDDzP4MfAK8FtmyRCSe7Peoxx7OuYFm1gH4EWgOPOicmxLxykQkbniDIrAQqExo82Nh5MoRkXgUzlGPXsBc4HLgSmC2mV0f6cJEJH6E06O4G2jtnNsCYGa1gVnAG5EsTETiRzg7M9cBO4qN7wCyIlOOiMSj0q71uCsYzAbmmNkYQvsoLiG0KSIi5URpmx57Tqr6LnjsMSZy5YhIPCrtorBHolmIiMQv785MM6sD3AMcAxy+Z7pz7uwI1iUicSScnZnDgaVAI+ARYA0wL4I1iUicCScoajvnXgfynHOfO+euB06KcF0iEkfCOY8iL3jOMbOLgPXAkZErSUTiTThB8biZVQf+ArwEVAP+N6JViUhcCeeisPHB4A/AWZEtR0TiUWknXL3Ebz+u+x+cc30iUpGIxJ3SehSZUauiBA2bdYrl6uUAJVZIiHUJEkGlnXA1JJqFiEj80g2ARMRLQSEiXgoKEfEK5xeumpvZVDNbFIwfZ2b3R740EYkX4fQoXiN08588AOfcAuDqSBYlIvElnKBIcs7t+0M1+ZEoRkTiUzhBsdnMmvDbDYCuBHIiWpWIxJVwrvXoDQwGWppZNrAa6B7RqkQkroRzrccq4NzgVoIVnHM7fK8Rkd+XcH7h6sF9xgFwzj0aoZpEJM6Es+nxU7Hhw4GLgSWRKUdE4lE4mx5/LT5uZgOBsRGrSETizsGcmZkEND7UhYhI/ApnH8VCfvtdigSgDqD9EyLlSDj7KC4uNpwPbHTO6YQrkXKk1KAwswrABOdcqyjVIyJxqNR9FM65QuAbM6sfpXpEJA6Fs+mRBiw2s7kUO1TqnOscsapEJK6EExS6B6lIORdOUFzonOtXfIKZPQN8HpmSRCTehHMeRYcSpl1wqAsRkfhV2n09bgFuBRqb2YJis44AZka6MBGJH6VterwNTAKeAvoXm77DObc1olWJSFwp7b4ePxC6jWDX6JUjIvFIv8ItIl4KChHxUlCIiJeCQkS8FBQi4qWgEBEvBYWIeCkoRMRLQSEiXgoKEfFSUIiIl4JCRLwUFCLipaAQES8FhYh4KShExEtBISJeCgoR8VJQiIiXgkJEvBQUIuKloBARLwWFiHgpKETES0FxCKRnpDJq7Jt8Nnssn84aww03dQfg6FYtGPvxcD6Z+QH/GvEyVY+oAsDxJxzL5OmjmTx9NFO+eJ/zLzqn6L3OPKc90+eOZ8aXk+h9Z6+YtKc8ePXV51i7dj5ffjmlaFrNmtWZMGE4ixZ9zoQJw6lRo3rRvNNPP4k5cyYxf/4nTJnybtH0Dh3OYMGCaSxePJ2+fW+NahuiyZxzsa6hRBk1j4nPwkqQUjeZlLp1WLRgCVWqJvHRtFFc370PLwx6ksceeI7ZszLp0u0y6jc4kueefInDKx9O3u48CgoKSKmbzJQv3ueEo87COccXmRPoetmfyVm/kYmfjuTWXnezYtl3sW6i15ZdO2JdwgFp374dO3f+zOuv/402bUL34X7iiXvZtm07AwcOom/fW6lRozr33/8U1atX47PPPqBz52vJylpPnTq12bRpCxUqVGDRos+56KJurFuXw8yZ4+jR43aWLl0R49aF75df1lo4y6lHcQjkbtzMogVLAPhp58+sWL6K1LQUmjRtyOxZmQB88dm/ubBT6D/kL7t+oaCgAIDDDjuMPWHdus2xrFmVxdrv15GXl8eY9ydy3oVnxaBFv38zZsxl27bte03r1KkDw4a9B8CwYe/RuXNHALp0uYQxYyaRlbUegE2btgDQtu3xfPfdGlavXkteXh6jRo2jU6eOUWxF9EQ9KMzsT9FeZzQdWS+dVscdxVdfLmDZ0hV0vCD0h37xJeeRnpFatFzrNsfy6awxTJ35If3vepSCggJS0+qyPjunaJmc9RtJTasb9TaUVykpyWzYkAvAhg251KmTDECzZo2pUaM6kyePZNasCXTrdgUA6emprFu3vuj12dk5pKf/Pj+vWPQoHtnfDDO70cwyzSzzp1+3RbOmQyKpShKvDX2BhwY8zc4dP3HXbQ/Qs1dXJk17lypVk8jLyyta9qsvF3L2KZdw4TlduO1//8xhh1XCSugExuumYXmSmJhA69bHcumlPenUqTsDBvShadNGWAkf2O/189rv3cz/G2a2YH+zgP1GrnNuMDAYytY+CoDExEReG/ICH4yawKTxnwDw3YrVXHPFjQA0btKAczqe8R+vW7l8Fbt+3kWLo5qRs34j6RlpRfPS0uuyMfiGk8jLzd1MamoKGzbkkpqawqZNmwHIzt7Ali3b+PnnXfz88y5mzJjDcccdTXZ2DkcemV70+oyMNHJyfp+fV6R6FHWBHkCnEh5bIrTOmPrrS4+ycvkqBg8aUjStdnItAMyMO/rexFtvjgSgXv0MEhISAMiol0bjpg3JWpvN1/MX0ahJferVz6BixYpccvmFTJ40LfqNKafGj59C9+5XAtC9+5WMGxc6IjJu3GROPbUdCQkJVK58OG3btmbp0hVkZn5D06aNaNiwHhUrVuSqqzoxfvyU0lZRZkWkRwGMB6o6577ed4aZfRahdcZM25NO4MqrL+HbxcuYPH00AE8/9gKNGjegZ6+uAEwc/wkjh38AQLuTT6D3Hb3Iz8+nsLCQe/s+xratoR1r99/zBG+PHkyFhAqMHP4By5fG/xGPsmjo0Jc47bSTSU6uycqVc3j88ecZOHAQw4f/g549u5CVtZ5rrrkZgGXLVjJ58mdkZk6msLCQN998h2+/XQ7AnXc+wLhxb5GQkMCQISNZsmR5LJsVMTo8KodEWTs8KiE6PCoih4yCQkS8FBQi4qWgEBEvBYWIeCkoRMRLQSEiXgoKEfFSUIiIl4JCRLwUFCLipaAQES8FhYh4KShExEtBISJeCgoR8VJQiIiXgkJEvBQUIuKloBARLwWFiHgpKETES0EhIl4KChHxUlCIiJeCQkS8FBQi4qWgEBEvBYWIeCkoRMRLQSEiXgoKEfFSUIiIl4JCRLwUFCLipaAQES8FhYh4KShExEtBISJeCgoR8VJQiIiXgkJEvBQUIuKloBARLwWFiHgpKETES0EhIl4KChHxUlCIiJeCQkS8zDkX6xrKHTO70Tk3ONZ1SHj0ealHESs3xroAOSDl/vNSUIiIl4JCRLwUFLFRrrd3y6By/3lpZ6aIeKlHISJeCoooMrPzzWyZma00s/6xrkdKZ2ZvmFmumS2KdS2xpqCIEjNLAF4GLgCOBrqa2dGxrUo8/gWcH+si4oGCInraASudc6ucc7uBd4BLYlyTlMI5Nx3YGus64oGCInoygKxi4+uCaSJxT0ERPVbCNB1ykjJBQRE964B6xcaPBNbHqBaRA6KgiJ55QDMza2RmlYCrgbExrkkkLAqKKHHO5QO3AR8DS4B3nXOLY1uVlMbMRgD/BlqY2TozuyHWNcWKzswUES/1KETES0EhIl4KChHxUlCIiJeCQkS8FBQCgJntDJ7Tzew9z7J3mlnSAb7/mWY2Ptzp+yzT08z+7wDXt8bMkg/kNbJ/CorfseCK1QPinFvvnLvSs9idwAEFhZRtCooyyMwamtlSMxtiZgvM7L093/DBN+mDZjYDuMrMmpjZR2b2pZl9YWYtg+Uamdm/zWyemT22z3svCoYTzGygmS0M1nO7mfUB0oFpZjYtWK5j8F7zzWyUmVUNpp8f1DkDuDyMdrUzs1lm9lXw3KLY7HpBO5aZ2UPFXtPdzOaa2ddm9urBhKOEwTmnRxl7AA0JXVB2ajD+BtA3GF4D3FNs2alAs2D4j8CnwfBYoEcw3BvYWey9FwXDtwCjgcRgvFaxdSQHw8nAdKBKMN4PeBA4nNDVss0IXRD3LjC+hLacuWc6UK3Yus4FRgfDPYEcoDZQGVgEnAgcBYwDKgbLDSrWpqIa9fjvH4kHkS0SH7KcczOD4WFAH2BgMD4SIPhmPwUYZVZ08ephwfOpwBXB8FvAMyWs41zgFRc6/RznXEm/zXASoR/imRmsoxKh055bAqudcyuCWobhvz9GdWCImTUjFIQVi82b4pzbErzX+0B7IB9oA8wL1l0ZyPWsQw6CgqLs2vfc++LjPwXPFYDtzrnjw3yPfVmYy0xxznXda6LZ8WG8dl+PAdOcc5eZWUPgs2LzSmqvAUOccwMOcD1ygLSPouyqb2YnB8NdgRn7LuCc+xFYbWZXAVjIH4LZMwldwQrQbT/rmAzcbGaJwetrBdN3AEcEw7OBU82sabBMkpk1B5YCjcysSbEafaoD2cFwz33mdTCzWmZWGbg0qH8qcKWZpeypz8wahLEeOUAKirJrCXCdmS0AagH/2M9y3YAbzOwbYDG//fzeHUBvM5tH6A+0JP8E1gILgtdfE0wfDEwys2nOuU2E/qhHBLXMBlo6534htKkxIdiZ+X0YbXoWeMrMZgL77pScQWgT6WtC+y4ynXPfAvcDk4N1TwHSwliPHCBdPVoGBd3y8c65VjEuRcoJ9ShExEs9ChHxUo9CRLwUFCLipaAQES8FhYh4KShExEtBISJe/w9TRh74pLezgQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "y_prediction = mod.predict(x_val_scaled)\n",
    "cm = metrics.confusion_matrix(y_val, y_prediction)\n",
    "\n",
    "sns.heatmap(cm, square=True, annot=True, fmt='d', cbar=False,xticklabels=range(2),yticklabels=range(2))\n",
    "print(cm) \n",
    "plt.ylabel('true label')\n",
    "plt.xlabel('predicted label');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6760204081632653"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### presition score and recall\n",
    "precision_score = metrics.precision_score(y_val,y_prediction)\n",
    "precision_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2656641604010025"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recall_score = metrics.recall_score(y_val,y_prediction)\n",
    "recall_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### question : what's the score?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.38143216984526807"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1 = 2*precision_score*recall_score/(precision_score +recall_score)\n",
    "f1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### how to lower the threshhold ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.77998087, 0.22001913],\n",
       "       [0.99367811, 0.00632189],\n",
       "       [0.66162342, 0.33837658],\n",
       "       ...,\n",
       "       [0.89861127, 0.10138873],\n",
       "       [0.9836316 , 0.0163684 ],\n",
       "       [0.99529885, 0.00470115]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### if I want to improve the recall, I need to lower the threshhold.\n",
    "mod.predict_proba(x_val_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### since the accuracy is low, I want to try the neuron net work\n",
    "import keras\n",
    "from keras import layers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### do we need to normalize x to make it smaller?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(160000, 200)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(160000,)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "160000/160000 [==============================] - 4s 28us/step - loss: 0.2619 - acc: 0.9061\n",
      "Epoch 2/100\n",
      "160000/160000 [==============================] - 3s 21us/step - loss: 0.2339 - acc: 0.9137\n",
      "Epoch 3/100\n",
      "160000/160000 [==============================] - 4s 23us/step - loss: 0.2249 - acc: 0.9161\n",
      "Epoch 4/100\n",
      "160000/160000 [==============================] - 4s 26us/step - loss: 0.2163 - acc: 0.9193\n",
      "Epoch 5/100\n",
      "160000/160000 [==============================] - 4s 22us/step - loss: 0.2070 - acc: 0.9225\n",
      "Epoch 6/100\n",
      "160000/160000 [==============================] - 4s 24us/step - loss: 0.1950 - acc: 0.9264\n",
      "Epoch 7/100\n",
      "160000/160000 [==============================] - 4s 25us/step - loss: 0.1823 - acc: 0.9309\n",
      "Epoch 8/100\n",
      "160000/160000 [==============================] - 4s 24us/step - loss: 0.1684 - acc: 0.9371\n",
      "Epoch 9/100\n",
      "160000/160000 [==============================] - 4s 24us/step - loss: 0.1532 - acc: 0.9424\n",
      "Epoch 10/100\n",
      "160000/160000 [==============================] - 5s 30us/step - loss: 0.1386 - acc: 0.9484\n",
      "Epoch 11/100\n",
      "160000/160000 [==============================] - 5s 34us/step - loss: 0.1245 - acc: 0.9541\n",
      "Epoch 12/100\n",
      "160000/160000 [==============================] - 4s 26us/step - loss: 0.1099 - acc: 0.9605\n",
      "Epoch 13/100\n",
      "160000/160000 [==============================] - 4s 26us/step - loss: 0.0962 - acc: 0.9663\n",
      "Epoch 14/100\n",
      "160000/160000 [==============================] - 5s 29us/step - loss: 0.0841 - acc: 0.9709\n",
      "Epoch 15/100\n",
      "160000/160000 [==============================] - 4s 27us/step - loss: 0.0726 - acc: 0.9765\n",
      "Epoch 16/100\n",
      "160000/160000 [==============================] - 4s 25us/step - loss: 0.0633 - acc: 0.9796\n",
      "Epoch 17/100\n",
      "160000/160000 [==============================] - 4s 24us/step - loss: 0.0528 - acc: 0.9845\n",
      "Epoch 18/100\n",
      "160000/160000 [==============================] - 4s 27us/step - loss: 0.0436 - acc: 0.9886\n",
      "Epoch 19/100\n",
      "160000/160000 [==============================] - 4s 27us/step - loss: 0.0367 - acc: 0.9910\n",
      "Epoch 20/100\n",
      "160000/160000 [==============================] - 5s 28us/step - loss: 0.0308 - acc: 0.9936\n",
      "Epoch 21/100\n",
      "160000/160000 [==============================] - 5s 29us/step - loss: 0.0254 - acc: 0.9956\n",
      "Epoch 22/100\n",
      "160000/160000 [==============================] - 4s 28us/step - loss: 0.0195 - acc: 0.9976\n",
      "Epoch 23/100\n",
      "160000/160000 [==============================] - 4s 24us/step - loss: 0.0159 - acc: 0.9987\n",
      "Epoch 24/100\n",
      "160000/160000 [==============================] - 5s 29us/step - loss: 0.0126 - acc: 0.9994\n",
      "Epoch 25/100\n",
      "160000/160000 [==============================] - 4s 26us/step - loss: 0.0105 - acc: 0.9996\n",
      "Epoch 26/100\n",
      "160000/160000 [==============================] - 4s 28us/step - loss: 0.0087 - acc: 0.9998\n",
      "Epoch 27/100\n",
      "160000/160000 [==============================] - 4s 25us/step - loss: 0.0070 - acc: 0.9999\n",
      "Epoch 28/100\n",
      "160000/160000 [==============================] - 4s 25us/step - loss: 0.0055 - acc: 1.0000\n",
      "Epoch 29/100\n",
      "160000/160000 [==============================] - 4s 23us/step - loss: 0.0043 - acc: 1.0000\n",
      "Epoch 30/100\n",
      "160000/160000 [==============================] - 4s 27us/step - loss: 0.0035 - acc: 1.0000\n",
      "Epoch 31/100\n",
      "160000/160000 [==============================] - 5s 29us/step - loss: 0.0029 - acc: 1.0000\n",
      "Epoch 32/100\n",
      "160000/160000 [==============================] - 4s 26us/step - loss: 0.0025 - acc: 1.0000\n",
      "Epoch 33/100\n",
      "160000/160000 [==============================] - 4s 24us/step - loss: 0.0021 - acc: 1.0000\n",
      "Epoch 34/100\n",
      "160000/160000 [==============================] - 4s 23us/step - loss: 0.0019 - acc: 1.0000\n",
      "Epoch 35/100\n",
      "160000/160000 [==============================] - 4s 28us/step - loss: 0.0016 - acc: 1.0000\n",
      "Epoch 36/100\n",
      "160000/160000 [==============================] - 4s 28us/step - loss: 0.0015 - acc: 1.0000\n",
      "Epoch 37/100\n",
      "160000/160000 [==============================] - 4s 26us/step - loss: 0.0013 - acc: 1.0000\n",
      "Epoch 38/100\n",
      "160000/160000 [==============================] - 4s 28us/step - loss: 0.0012 - acc: 1.0000\n",
      "Epoch 39/100\n",
      "160000/160000 [==============================] - 5s 30us/step - loss: 0.0010 - acc: 1.0000\n",
      "Epoch 40/100\n",
      "160000/160000 [==============================] - 4s 24us/step - loss: 9.1214e-04 - acc: 1.0000\n",
      "Epoch 41/100\n",
      "160000/160000 [==============================] - 4s 28us/step - loss: 8.1959e-04 - acc: 1.0000\n",
      "Epoch 42/100\n",
      "160000/160000 [==============================] - 5s 28us/step - loss: 7.2557e-04 - acc: 1.0000\n",
      "Epoch 43/100\n",
      "160000/160000 [==============================] - 5s 32us/step - loss: 6.5779e-04 - acc: 1.0000\n",
      "Epoch 44/100\n",
      "160000/160000 [==============================] - 4s 24us/step - loss: 5.8320e-04 - acc: 1.0000\n",
      "Epoch 45/100\n",
      "160000/160000 [==============================] - 4s 28us/step - loss: 5.2712e-04 - acc: 1.0000\n",
      "Epoch 46/100\n",
      "160000/160000 [==============================] - 4s 26us/step - loss: 4.8005e-04 - acc: 1.0000\n",
      "Epoch 47/100\n",
      "160000/160000 [==============================] - 5s 31us/step - loss: 4.2751e-04 - acc: 1.0000\n",
      "Epoch 48/100\n",
      "160000/160000 [==============================] - 5s 29us/step - loss: 3.7954e-04 - acc: 1.0000\n",
      "Epoch 49/100\n",
      "160000/160000 [==============================] - 4s 27us/step - loss: 3.4038e-04 - acc: 1.0000\n",
      "Epoch 50/100\n",
      "160000/160000 [==============================] - 5s 31us/step - loss: 3.1044e-04 - acc: 1.0000\n",
      "Epoch 51/100\n",
      "160000/160000 [==============================] - 5s 31us/step - loss: 2.7607e-04 - acc: 1.0000\n",
      "Epoch 52/100\n",
      "160000/160000 [==============================] - 5s 31us/step - loss: 2.4838e-04 - acc: 1.0000\n",
      "Epoch 53/100\n",
      "160000/160000 [==============================] - 4s 26us/step - loss: 2.2696e-04 - acc: 1.0000\n",
      "Epoch 54/100\n",
      " 94000/160000 [================>.............] - ETA: 1s - loss: 1.9202e-04 - acc: 1.0000"
     ]
    }
   ],
   "source": [
    "model = keras.Sequential()\n",
    "model.add(keras.layers.Dense(200,input_dim = 200,activation = \"relu\")) ### 200 is nurons, 8 is feature\n",
    "model.add(keras.layers.Dense(200,activation = \"relu\"))\n",
    "model.add(keras.layers.Dense(1,activation = \"sigmoid\"))\n",
    "\n",
    "model.compile(loss = \"binary_crossentropy\",optimizer = 'adam',metrics = ['accuracy'])\n",
    "model.fit(x_train_scaled,y_train,epochs = 100, batch_size = 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "160000/160000 [==============================] - 7s 45us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.003664806517818806, 0.999075]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(x_train_scaled,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40000/40000 [==============================] - 2s 46us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.0346199946934822, 0.8778]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(x_val_scaled,y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
